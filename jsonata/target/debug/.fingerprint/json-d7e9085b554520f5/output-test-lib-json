{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":8633,"byte_end":8647,"line_start":302,"line_end":302,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"            writer: writer","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::redundant_field_names)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":8633,"byte_end":8647,"line_start":302,"line_end":302,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"            writer: writer","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"writer","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/codegen.rs:302:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            writer: writer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `writer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::redundant_field_names)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":9364,"byte_end":9378,"line_start":331,"line_end":331,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"            writer: writer,","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":9364,"byte_end":9378,"line_start":331,"line_end":331,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"            writer: writer,","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"writer","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/codegen.rs:331:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            writer: writer,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `writer`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":11653,"byte_end":11667,"line_start":371,"line_end":371,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"            source: source,","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":11653,"byte_end":11667,"line_start":371,"line_end":371,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"            source: source,","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"source","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:371:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            source: source,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `source`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":13428,"byte_end":13434,"line_start":423,"line_end":423,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            ch: ch,","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":13428,"byte_end":13434,"line_start":423,"line_end":423,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            ch: ch,","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"ch","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:423:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            ch: ch,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `ch`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/util/diyfp.rs","byte_start":954,"byte_end":958,"line_start":30,"line_end":30,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"        DiyFp { f: f, e: e }","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/util/diyfp.rs","byte_start":954,"byte_end":958,"line_start":30,"line_end":30,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"        DiyFp { f: f, e: e }","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"f","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/util/diyfp.rs:30:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        DiyFp { f: f, e: e }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `f`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/util/diyfp.rs","byte_start":960,"byte_end":964,"line_start":30,"line_end":30,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"        DiyFp { f: f, e: e }","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/util/diyfp.rs","byte_start":960,"byte_end":964,"line_start":30,"line_end":30,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"        DiyFp { f: f, e: e }","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/util/diyfp.rs:30:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        DiyFp { f: f, e: e }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `e`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"constants have by default a `'static` lifetime","code":{"code":"clippy::redundant_static_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/util/print_dec.rs","byte_start":340,"byte_end":347,"line_start":11,"line_end":11,"column_start":24,"column_end":31,"is_primary":true,"text":[{"text":"const DEC_DIGITS_LUT: &'static[u8] =","highlight_start":24,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::redundant_static_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider removing `'static`","code":null,"level":"help","spans":[{"file_name":"json-rust/src/util/print_dec.rs","byte_start":339,"byte_end":351,"line_start":11,"line_end":11,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"const DEC_DIGITS_LUT: &'static[u8] =","highlight_start":23,"highlight_end":35}],"label":null,"suggested_replacement":"&[u8]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constants have by default a `'static` lifetime\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/util/print_dec.rs:11:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst DEC_DIGITS_LUT: &'static[u8] =\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: consider removing `'static`: `&[u8]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::redundant_static_lifetimes)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\u001b[0m\n\n"}
{"message":"constants have by default a `'static` lifetime","code":{"code":"clippy::redundant_static_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/util/print_dec.rs","byte_start":613,"byte_end":620,"line_start":18,"line_end":18,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"const ZEROFILL: &'static [u8] = &[b'0'; 20];","highlight_start":18,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider removing `'static`","code":null,"level":"help","spans":[{"file_name":"json-rust/src/util/print_dec.rs","byte_start":612,"byte_end":625,"line_start":18,"line_end":18,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"const ZEROFILL: &'static [u8] = &[b'0'; 20];","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"&[u8]","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: constants have by default a `'static` lifetime\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/util/print_dec.rs:18:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst ZEROFILL: &'static [u8] = &[b'0'; 20];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: consider removing `'static`: `&[u8]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":2291,"byte_end":2299,"line_start":74,"line_end":74,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"            len: len,","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":2291,"byte_end":2299,"line_start":74,"line_end":74,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"            len: len,","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":"len","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:74:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            len: len,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `len`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":2347,"byte_end":2357,"line_start":76,"line_end":76,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"            hash: hash","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":2347,"byte_end":2357,"line_start":76,"line_end":76,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"            hash: hash","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"hash","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:76:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            hash: hash\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `hash`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":5039,"byte_end":5047,"line_start":165,"line_end":165,"column_start":17,"column_end":25,"is_primary":true,"text":[{"text":"                ptr: ptr,","highlight_start":17,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":5039,"byte_end":5047,"line_start":165,"line_end":165,"column_start":17,"column_end":25,"is_primary":true,"text":[{"text":"                ptr: ptr,","highlight_start":17,"highlight_end":25}],"label":null,"suggested_replacement":"ptr","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:165:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                ptr: ptr,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `ptr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":6469,"byte_end":6481,"line_start":217,"line_end":217,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"            value: value,","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":6469,"byte_end":6481,"line_start":217,"line_end":217,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"            value: value,","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"value","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:217:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            value: value,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `value`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":16595,"byte_end":16607,"line_start":538,"line_end":538,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"            store: store","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":16595,"byte_end":16607,"line_start":538,"line_end":538,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"            store: store","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":"store","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:538:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            store: store\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `store`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":2187,"byte_end":2205,"line_start":66,"line_end":66,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            exponent: exponent,","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/number.rs","byte_start":2187,"byte_end":2205,"line_start":66,"line_end":66,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            exponent: exponent,","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":"exponent","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:66:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            exponent: exponent,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `exponent`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"redundant field names in struct initialization","code":{"code":"clippy::redundant_field_names","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":2219,"byte_end":2237,"line_start":67,"line_end":67,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            mantissa: mantissa,","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/src/number.rs","byte_start":2219,"byte_end":2237,"line_start":67,"line_end":67,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            mantissa: mantissa,","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":"mantissa","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant field names in struct initialization\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:67:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            mantissa: mantissa,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `mantissa`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\u001b[0m\n\n"}
{"message":"you should consider adding a `Default` implementation for `DumpGenerator`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":6059,"byte_end":6165,"line_start":191,"line_end":195,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":27},{"text":"        DumpGenerator {","highlight_start":1,"highlight_end":24},{"text":"            code: Vec::with_capacity(1024),","highlight_start":1,"highlight_end":44},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::new_without_default)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":6034,"byte_end":6034,"line_start":190,"line_end":190,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl DumpGenerator {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for DumpGenerator {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you should consider adding a `Default` implementation for `DumpGenerator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/codegen.rs:191:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        DumpGenerator {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            code: Vec::with_capacity(1024),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::new_without_default)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try adding this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ impl Default for DumpGenerator {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     fn default() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         Self::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"use of `offset` with a `usize` casted to an `isize`","code":{"code":"clippy::ptr_offset_with_cast","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":10635,"byte_end":10676,"line_start":385,"line_end":385,"column_start":13,"column_end":54,"is_primary":true,"text":[{"text":"            dst.as_mut_ptr().offset(dst_len as isize),","highlight_start":13,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::ptr_offset_with_cast)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/src/codegen.rs","byte_start":10635,"byte_end":10676,"line_start":385,"line_end":385,"column_start":13,"column_end":54,"is_primary":true,"text":[{"text":"            dst.as_mut_ptr().offset(dst_len as isize),","highlight_start":13,"highlight_end":54}],"label":null,"suggested_replacement":"dst.as_mut_ptr().add(dst_len)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `offset` with a `usize` casted to an `isize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/codegen.rs:385:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m385\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            dst.as_mut_ptr().offset(dst_len as isize),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `dst.as_mut_ptr().add(dst_len)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::ptr_offset_with_cast)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\u001b[0m\n\n"}
{"message":"use of `offset` with a `usize` casted to an `isize`","code":{"code":"clippy::ptr_offset_with_cast","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":12466,"byte_end":12507,"line_start":394,"line_end":394,"column_start":19,"column_end":60,"is_primary":true,"text":[{"text":"        unsafe { *self.byte_ptr.offset(self.index as isize) }","highlight_start":19,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":12466,"byte_end":12507,"line_start":394,"line_end":394,"column_start":19,"column_end":60,"is_primary":true,"text":[{"text":"        unsafe { *self.byte_ptr.offset(self.index as isize) }","highlight_start":19,"highlight_end":60}],"label":null,"suggested_replacement":"self.byte_ptr.add(self.index)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `offset` with a `usize` casted to an `isize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:394:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m394\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        unsafe { *self.byte_ptr.offset(self.index as isize) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `self.byte_ptr.add(self.index)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\u001b[0m\n\n"}
{"message":"unnecessary closure used to substitute value for `Option::None`","code":{"code":"clippy::unnecessary_lazy_evaluations","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":19724,"byte_end":19781,"line_start":570,"line_end":570,"column_start":45,"column_end":102,"is_primary":true,"text":[{"text":"                        None         => e = e.checked_add(1).ok_or_else(|| Error::ExceededDepthLimit)?,","highlight_start":45,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::unnecessary_lazy_evaluations)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use `ok_or` instead","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":19724,"byte_end":19781,"line_start":570,"line_end":570,"column_start":45,"column_end":102,"is_primary":true,"text":[{"text":"                        None         => e = e.checked_add(1).ok_or_else(|| Error::ExceededDepthLimit)?,","highlight_start":45,"highlight_end":102}],"label":null,"suggested_replacement":"e.checked_add(1).ok_or(Error::ExceededDepthLimit)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary closure used to substitute value for `Option::None`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:570:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        None         => e = e.checked_add(1).ok_or_else(|| Error::ExceededDepthLimit)?,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `ok_or` instead: `e.checked_add(1).ok_or(Error::ExceededDepthLimit)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unnecessary_lazy_evaluations)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations\u001b[0m\n\n"}
{"message":"use of `offset` with a `usize` casted to an `isize`","code":{"code":"clippy::ptr_offset_with_cast","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":6873,"byte_end":6912,"line_start":206,"line_end":206,"column_start":31,"column_end":70,"is_primary":true,"text":[{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":31,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/parser.rs","byte_start":22623,"byte_end":22643,"line_start":661,"line_end":661,"column_start":57,"column_end":77,"is_primary":false,"text":[{"text":"                        let index = object.insert_index(expect_string!(self), JsonValue::Null);","highlight_start":57,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"expect_string!","def_site_span":{"file_name":"json-rust/src/parser.rs","byte_start":6536,"byte_end":7328,"line_start":194,"line_end":222,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! expect_string {","highlight_start":1,"highlight_end":29},{"text":"    ($parser:ident) => ({","highlight_start":1,"highlight_end":26},{"text":"        let result: &str;","highlight_start":1,"highlight_end":26},{"text":"        let start = $parser.index;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let ch = expect_byte!($parser);","highlight_start":1,"highlight_end":44},{"text":"            if ALLOWED[ch as usize] {","highlight_start":1,"highlight_end":38},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\"' {","highlight_start":1,"highlight_end":28},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":1,"highlight_end":71},{"text":"                    let len = $parser.index - 1 - start;","highlight_start":1,"highlight_end":57},{"text":"                    result = str::from_utf8_unchecked(slice::from_raw_parts(ptr, len));","highlight_start":1,"highlight_end":88},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\\\\' {","highlight_start":1,"highlight_end":29},{"text":"                result = $parser.read_complex_string(start)?;","highlight_start":1,"highlight_end":62},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            return $parser.unexpected_character();","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":6873,"byte_end":6912,"line_start":206,"line_end":206,"column_start":31,"column_end":70,"is_primary":true,"text":[{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":31,"highlight_end":70}],"label":null,"suggested_replacement":"$parser.byte_ptr.add(start)","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"json-rust/src/parser.rs","byte_start":22623,"byte_end":22643,"line_start":661,"line_end":661,"column_start":57,"column_end":77,"is_primary":false,"text":[{"text":"                        let index = object.insert_index(expect_string!(self), JsonValue::Null);","highlight_start":57,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"expect_string!","def_site_span":{"file_name":"json-rust/src/parser.rs","byte_start":6536,"byte_end":7328,"line_start":194,"line_end":222,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! expect_string {","highlight_start":1,"highlight_end":29},{"text":"    ($parser:ident) => ({","highlight_start":1,"highlight_end":26},{"text":"        let result: &str;","highlight_start":1,"highlight_end":26},{"text":"        let start = $parser.index;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let ch = expect_byte!($parser);","highlight_start":1,"highlight_end":44},{"text":"            if ALLOWED[ch as usize] {","highlight_start":1,"highlight_end":38},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\"' {","highlight_start":1,"highlight_end":28},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":1,"highlight_end":71},{"text":"                    let len = $parser.index - 1 - start;","highlight_start":1,"highlight_end":57},{"text":"                    result = str::from_utf8_unchecked(slice::from_raw_parts(ptr, len));","highlight_start":1,"highlight_end":88},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\\\\' {","highlight_start":1,"highlight_end":29},{"text":"                result = $parser.read_complex_string(start)?;","highlight_start":1,"highlight_end":62},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            return $parser.unexpected_character();","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `offset` with a `usize` casted to an `isize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:206:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    let ptr = $parser.byte_ptr.offset(start as isize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `$parser.byte_ptr.add(start)`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let index = object.insert_index(expect_string!(self), JsonValue::Null);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `expect_string` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of `offset` with a `usize` casted to an `isize`","code":{"code":"clippy::ptr_offset_with_cast","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":6873,"byte_end":6912,"line_start":206,"line_end":206,"column_start":31,"column_end":70,"is_primary":true,"text":[{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":31,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/parser.rs","byte_start":23022,"byte_end":23042,"line_start":673,"line_end":673,"column_start":25,"column_end":45,"is_primary":false,"text":[{"text":"                b'\"' => expect_string!(self).into(),","highlight_start":25,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"expect_string!","def_site_span":{"file_name":"json-rust/src/parser.rs","byte_start":6536,"byte_end":7328,"line_start":194,"line_end":222,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! expect_string {","highlight_start":1,"highlight_end":29},{"text":"    ($parser:ident) => ({","highlight_start":1,"highlight_end":26},{"text":"        let result: &str;","highlight_start":1,"highlight_end":26},{"text":"        let start = $parser.index;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let ch = expect_byte!($parser);","highlight_start":1,"highlight_end":44},{"text":"            if ALLOWED[ch as usize] {","highlight_start":1,"highlight_end":38},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\"' {","highlight_start":1,"highlight_end":28},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":1,"highlight_end":71},{"text":"                    let len = $parser.index - 1 - start;","highlight_start":1,"highlight_end":57},{"text":"                    result = str::from_utf8_unchecked(slice::from_raw_parts(ptr, len));","highlight_start":1,"highlight_end":88},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\\\\' {","highlight_start":1,"highlight_end":29},{"text":"                result = $parser.read_complex_string(start)?;","highlight_start":1,"highlight_end":62},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            return $parser.unexpected_character();","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":6873,"byte_end":6912,"line_start":206,"line_end":206,"column_start":31,"column_end":70,"is_primary":true,"text":[{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":31,"highlight_end":70}],"label":null,"suggested_replacement":"$parser.byte_ptr.add(start)","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"json-rust/src/parser.rs","byte_start":23022,"byte_end":23042,"line_start":673,"line_end":673,"column_start":25,"column_end":45,"is_primary":false,"text":[{"text":"                b'\"' => expect_string!(self).into(),","highlight_start":25,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"expect_string!","def_site_span":{"file_name":"json-rust/src/parser.rs","byte_start":6536,"byte_end":7328,"line_start":194,"line_end":222,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! expect_string {","highlight_start":1,"highlight_end":29},{"text":"    ($parser:ident) => ({","highlight_start":1,"highlight_end":26},{"text":"        let result: &str;","highlight_start":1,"highlight_end":26},{"text":"        let start = $parser.index;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let ch = expect_byte!($parser);","highlight_start":1,"highlight_end":44},{"text":"            if ALLOWED[ch as usize] {","highlight_start":1,"highlight_end":38},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\"' {","highlight_start":1,"highlight_end":28},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":1,"highlight_end":71},{"text":"                    let len = $parser.index - 1 - start;","highlight_start":1,"highlight_end":57},{"text":"                    result = str::from_utf8_unchecked(slice::from_raw_parts(ptr, len));","highlight_start":1,"highlight_end":88},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\\\\' {","highlight_start":1,"highlight_end":29},{"text":"                result = $parser.read_complex_string(start)?;","highlight_start":1,"highlight_end":62},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            return $parser.unexpected_character();","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `offset` with a `usize` casted to an `isize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:206:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    let ptr = $parser.byte_ptr.offset(start as isize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `$parser.byte_ptr.add(start)`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                b'\"' => expect_string!(self).into(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `expect_string` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"use of `offset` with a `usize` casted to an `isize`","code":{"code":"clippy::ptr_offset_with_cast","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":6873,"byte_end":6912,"line_start":206,"line_end":206,"column_start":31,"column_end":70,"is_primary":true,"text":[{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":31,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/parser.rs","byte_start":25348,"byte_end":25368,"line_start":733,"line_end":733,"column_start":62,"column_end":82,"is_primary":false,"text":[{"text":"                                *index = object.insert_index(expect_string!(self), JsonValue::Null);","highlight_start":62,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"expect_string!","def_site_span":{"file_name":"json-rust/src/parser.rs","byte_start":6536,"byte_end":7328,"line_start":194,"line_end":222,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! expect_string {","highlight_start":1,"highlight_end":29},{"text":"    ($parser:ident) => ({","highlight_start":1,"highlight_end":26},{"text":"        let result: &str;","highlight_start":1,"highlight_end":26},{"text":"        let start = $parser.index;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let ch = expect_byte!($parser);","highlight_start":1,"highlight_end":44},{"text":"            if ALLOWED[ch as usize] {","highlight_start":1,"highlight_end":38},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\"' {","highlight_start":1,"highlight_end":28},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":1,"highlight_end":71},{"text":"                    let len = $parser.index - 1 - start;","highlight_start":1,"highlight_end":57},{"text":"                    result = str::from_utf8_unchecked(slice::from_raw_parts(ptr, len));","highlight_start":1,"highlight_end":88},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\\\\' {","highlight_start":1,"highlight_end":29},{"text":"                result = $parser.read_complex_string(start)?;","highlight_start":1,"highlight_end":62},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            return $parser.unexpected_character();","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":6873,"byte_end":6912,"line_start":206,"line_end":206,"column_start":31,"column_end":70,"is_primary":true,"text":[{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":31,"highlight_end":70}],"label":null,"suggested_replacement":"$parser.byte_ptr.add(start)","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"json-rust/src/parser.rs","byte_start":25348,"byte_end":25368,"line_start":733,"line_end":733,"column_start":62,"column_end":82,"is_primary":false,"text":[{"text":"                                *index = object.insert_index(expect_string!(self), JsonValue::Null);","highlight_start":62,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"expect_string!","def_site_span":{"file_name":"json-rust/src/parser.rs","byte_start":6536,"byte_end":7328,"line_start":194,"line_end":222,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! expect_string {","highlight_start":1,"highlight_end":29},{"text":"    ($parser:ident) => ({","highlight_start":1,"highlight_end":26},{"text":"        let result: &str;","highlight_start":1,"highlight_end":26},{"text":"        let start = $parser.index;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let ch = expect_byte!($parser);","highlight_start":1,"highlight_end":44},{"text":"            if ALLOWED[ch as usize] {","highlight_start":1,"highlight_end":38},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\"' {","highlight_start":1,"highlight_end":28},{"text":"                unsafe {","highlight_start":1,"highlight_end":25},{"text":"                    let ptr = $parser.byte_ptr.offset(start as isize);","highlight_start":1,"highlight_end":71},{"text":"                    let len = $parser.index - 1 - start;","highlight_start":1,"highlight_end":57},{"text":"                    result = str::from_utf8_unchecked(slice::from_raw_parts(ptr, len));","highlight_start":1,"highlight_end":88},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if ch == b'\\\\' {","highlight_start":1,"highlight_end":29},{"text":"                result = $parser.read_complex_string(start)?;","highlight_start":1,"highlight_end":62},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            return $parser.unexpected_character();","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        result","highlight_start":1,"highlight_end":15},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `offset` with a `usize` casted to an `isize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:206:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    let ptr = $parser.byte_ptr.offset(start as isize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `$parser.byte_ptr.add(start)`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                *index = object.insert_index(expect_string!(self), JsonValue::Null);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `expect_string` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"redundant clone","code":{"code":"clippy::redundant_clone","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":26869,"byte_end":26877,"line_start":786,"line_end":786,"column_start":42,"column_end":50,"is_primary":true,"text":[{"text":"        let serialized = stringify(actual.clone());","highlight_start":42,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::redundant_clone)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this value is dropped without further use","code":null,"level":"note","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":26863,"byte_end":26869,"line_start":786,"line_end":786,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"        let serialized = stringify(actual.clone());","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":26869,"byte_end":26877,"line_start":786,"line_end":786,"column_start":42,"column_end":50,"is_primary":true,"text":[{"text":"        let serialized = stringify(actual.clone());","highlight_start":42,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant clone\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:786:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let serialized = stringify(actual.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::redundant_clone)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: this value is dropped without further use\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:786:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let serialized = stringify(actual.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\u001b[0m\n\n"}
{"message":"redundant clone","code":{"code":"clippy::redundant_clone","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":27139,"byte_end":27147,"line_start":796,"line_end":796,"column_start":42,"column_end":50,"is_primary":true,"text":[{"text":"        let serialized = stringify(actual.clone());","highlight_start":42,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this value is dropped without further use","code":null,"level":"note","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":27133,"byte_end":27139,"line_start":796,"line_end":796,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"        let serialized = stringify(actual.clone());","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/parser.rs","byte_start":27139,"byte_end":27147,"line_start":796,"line_end":796,"column_start":42,"column_end":50,"is_primary":true,"text":[{"text":"        let serialized = stringify(actual.clone());","highlight_start":42,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant clone\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:796:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m796\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let serialized = stringify(actual.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: this value is dropped without further use\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/parser.rs:796:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m796\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let serialized = stringify(actual.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":4763,"byte_end":4913,"line_start":146,"line_end":150,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Short(_)  => true,","highlight_start":1,"highlight_end":42},{"text":"            JsonValue::String(_) => true,","highlight_start":1,"highlight_end":42},{"text":"            _                    => false,","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::match_like_matches_macro)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":4763,"byte_end":4913,"line_start":146,"line_end":150,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Short(_)  => true,","highlight_start":1,"highlight_end":42},{"text":"            JsonValue::String(_) => true,","highlight_start":1,"highlight_end":42},{"text":"            _                    => false,","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"matches!(*self, JsonValue::Short(_) | JsonValue::String(_))","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/value/mod.rs:146:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsonValue::Short(_)  => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsonValue::String(_) => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _                    => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `matches!(*self, JsonValue::Short(_) | JsonValue::String(_))`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::match_like_matches_macro)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":4967,"byte_end":5075,"line_start":154,"line_end":157,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Number(_) => true,","highlight_start":1,"highlight_end":42},{"text":"            _                    => false,","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":4967,"byte_end":5075,"line_start":154,"line_end":157,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Number(_) => true,","highlight_start":1,"highlight_end":42},{"text":"            _                    => false,","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"matches!(*self, JsonValue::Number(_))","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/value/mod.rs:154:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsonValue::Number(_) => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _                    => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `matches!(*self, JsonValue::Number(_))`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5130,"byte_end":5239,"line_start":161,"line_end":164,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Boolean(_) => true,","highlight_start":1,"highlight_end":43},{"text":"            _                     => false","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5130,"byte_end":5239,"line_start":161,"line_end":164,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Boolean(_) => true,","highlight_start":1,"highlight_end":43},{"text":"            _                     => false","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"matches!(*self, JsonValue::Boolean(_))","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/value/mod.rs:161:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsonValue::Boolean(_) => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _                     => false\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `matches!(*self, JsonValue::Boolean(_))`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5291,"byte_end":5389,"line_start":168,"line_end":171,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Null => true,","highlight_start":1,"highlight_end":37},{"text":"            _               => false,","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5291,"byte_end":5389,"line_start":168,"line_end":171,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Null => true,","highlight_start":1,"highlight_end":37},{"text":"            _               => false,","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"matches!(*self, JsonValue::Null)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/value/mod.rs:168:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsonValue::Null => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _               => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `matches!(*self, JsonValue::Null)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5443,"byte_end":5551,"line_start":175,"line_end":178,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Object(_) => true,","highlight_start":1,"highlight_end":42},{"text":"            _                    => false,","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5443,"byte_end":5551,"line_start":175,"line_end":178,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Object(_) => true,","highlight_start":1,"highlight_end":42},{"text":"            _                    => false,","highlight_start":1,"highlight_end":43},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"matches!(*self, JsonValue::Object(_))","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/value/mod.rs:175:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsonValue::Object(_) => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _                    => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `matches!(*self, JsonValue::Object(_))`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5604,"byte_end":5710,"line_start":182,"line_end":185,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Array(_) => true,","highlight_start":1,"highlight_end":41},{"text":"            _                   => false,","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/value/mod.rs","byte_start":5604,"byte_end":5710,"line_start":182,"line_end":185,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            JsonValue::Array(_) => true,","highlight_start":1,"highlight_end":41},{"text":"            _                   => false,","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"matches!(*self, JsonValue::Array(_))","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/value/mod.rs:182:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            JsonValue::Array(_) => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _                   => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `matches!(*self, JsonValue::Array(_))`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"transmute from a `f64` to a `u64`","code":{"code":"clippy::transmute_float_to_int","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/util/diyfp.rs","byte_start":1545,"byte_end":1562,"line_start":53,"line_end":53,"column_start":22,"column_end":39,"is_primary":true,"text":[{"text":"        let u: u64 = mem::transmute(d);","highlight_start":22,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::transmute_float_to_int)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using","code":null,"level":"help","spans":[{"file_name":"json-rust/src/util/diyfp.rs","byte_start":1545,"byte_end":1562,"line_start":53,"line_end":53,"column_start":22,"column_end":39,"is_primary":true,"text":[{"text":"        let u: u64 = mem::transmute(d);","highlight_start":22,"highlight_end":39}],"label":null,"suggested_replacement":"d.to_bits()","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: transmute from a `f64` to a `u64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/util/diyfp.rs:53:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let u: u64 = mem::transmute(d);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using: `d.to_bits()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::transmute_float_to_int)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int\u001b[0m\n\n"}
{"message":"`if` chain can be rewritten with `match`","code":{"code":"clippy::comparison_chain","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/util/print_dec.rs","byte_start":2087,"byte_end":6581,"line_start":68,"line_end":203,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if exponent == 0 {","highlight_start":5,"highlight_end":23},{"text":"        write_num(&mut n, &mut curr, buf_ptr, lut_ptr);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        return wr.write_all(","highlight_start":1,"highlight_end":29},{"text":"            slice::from_raw_parts(","highlight_start":1,"highlight_end":35},{"text":"                buf_ptr.offset(curr),","highlight_start":1,"highlight_end":38},{"text":"                BUF_LEN - curr as usize","highlight_start":1,"highlight_end":40},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    } else if exponent < 0 {","highlight_start":1,"highlight_end":29},{"text":"        let mut e = safe_abs(exponent);","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Decimal number with a fraction that's fully printable","highlight_start":1,"highlight_end":65},{"text":"        if e < 18 {","highlight_start":1,"highlight_end":20},{"text":"            // eagerly decode 4 digits at a time","highlight_start":1,"highlight_end":49},{"text":"            for _ in 0 .. e >> 2 {","highlight_start":1,"highlight_end":35},{"text":"                let rem = (n % 10000) as isize;","highlight_start":1,"highlight_end":48},{"text":"                n /= 10000;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let d1 = (rem / 100) << 1;","highlight_start":1,"highlight_end":43},{"text":"                let d2 = (rem % 100) << 1;","highlight_start":1,"highlight_end":43},{"text":"                curr -= 4;","highlight_start":1,"highlight_end":27},{"text":"                ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);","highlight_start":1,"highlight_end":87},{"text":"                ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);","highlight_start":1,"highlight_end":91},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            e &= 3;","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // write the remaining 3, 2 or 1 digits","highlight_start":1,"highlight_end":52},{"text":"            if e & 2 == 2 {","highlight_start":1,"highlight_end":28},{"text":"                let d1 = ((n % 100) << 1) as isize;","highlight_start":1,"highlight_end":52},{"text":"                n /= 100;","highlight_start":1,"highlight_end":26},{"text":"                curr -= 2;","highlight_start":1,"highlight_end":27},{"text":"                ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);","highlight_start":1,"highlight_end":87},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if e & 1 == 1 {","highlight_start":1,"highlight_end":28},{"text":"                curr -= 1;","highlight_start":1,"highlight_end":27},{"text":"                *buf_ptr.offset(curr) = ((n % 10) as u8) + b'0';","highlight_start":1,"highlight_end":65},{"text":"                n /= 10;","highlight_start":1,"highlight_end":25},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            curr -= 1;","highlight_start":1,"highlight_end":23},{"text":"            *buf_ptr.offset(curr) = b'.';","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            write_num(&mut n, &mut curr, buf_ptr, lut_ptr);","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            return wr.write_all(","highlight_start":1,"highlight_end":33},{"text":"                slice::from_raw_parts(buf_ptr.offset(curr), BUF_LEN - curr as usize)","highlight_start":1,"highlight_end":85},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Not easily printable, write down fraction, then full number, then exponent","highlight_start":1,"highlight_end":86},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Since we move the decimal point right after the first digit, we have to adjust the","highlight_start":1,"highlight_end":94},{"text":"        // exponent part. If the number is long enough, this may result in the exponent switching","highlight_start":1,"highlight_end":98},{"text":"        // sign from negative to positive - we have to handle this case separately.","highlight_start":1,"highlight_end":84},{"text":"        let mut exponent_positive = false;","highlight_start":1,"highlight_end":43},{"text":"        if n < 10 {","highlight_start":1,"highlight_end":20},{"text":"            // Single digit, no fraction","highlight_start":1,"highlight_end":41},{"text":"            curr -= 1;","highlight_start":1,"highlight_end":23},{"text":"            *buf_ptr.offset(curr) = ((n % 10) as u8) + b'0';","highlight_start":1,"highlight_end":61},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            // eagerly decode 4 digits at a time","highlight_start":1,"highlight_end":49},{"text":"            while n >= 100000 {","highlight_start":1,"highlight_end":32},{"text":"                let rem = (n % 10000) as isize;","highlight_start":1,"highlight_end":48},{"text":"                n /= 10000;","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let d1 = (rem / 100) << 1;","highlight_start":1,"highlight_end":43},{"text":"                let d2 = (rem % 100) << 1;","highlight_start":1,"highlight_end":43},{"text":"                curr -= 4;","highlight_start":1,"highlight_end":27},{"text":"                ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);","highlight_start":1,"highlight_end":87},{"text":"                ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);","highlight_start":1,"highlight_end":91},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // decode 2 more digits","highlight_start":1,"highlight_end":36},{"text":"            if n >= 1000 {","highlight_start":1,"highlight_end":27},{"text":"                let d1 = ((n % 100) << 1) as isize;","highlight_start":1,"highlight_end":52},{"text":"                n /= 100;","highlight_start":1,"highlight_end":26},{"text":"                curr -= 2;","highlight_start":1,"highlight_end":27},{"text":"                ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);","highlight_start":1,"highlight_end":87},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // decode last 1 or 2 digits","highlight_start":1,"highlight_end":41},{"text":"            if n < 100 {","highlight_start":1,"highlight_end":25},{"text":"                curr -= 1;","highlight_start":1,"highlight_end":27},{"text":"                *buf_ptr.offset(curr) = ((n % 10) as u8) + b'0';","highlight_start":1,"highlight_end":65},{"text":"                n /= 10;","highlight_start":1,"highlight_end":25},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let d1 = ((n % 100) << 1) as isize;","highlight_start":1,"highlight_end":52},{"text":"                n /= 100;","highlight_start":1,"highlight_end":26},{"text":"                curr -= 2;","highlight_start":1,"highlight_end":27},{"text":"                ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);","highlight_start":1,"highlight_end":87},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let printed_so_far = BUF_LEN as u16 - curr as u16;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if printed_so_far <= e {","highlight_start":1,"highlight_end":37},{"text":"                // Subtract the amount of digits printed in the fraction","highlight_start":1,"highlight_end":73},{"text":"                // from the exponent that we still need to print using","highlight_start":1,"highlight_end":71},{"text":"                // the `e` notation","highlight_start":1,"highlight_end":36},{"text":"                e -= printed_so_far;","highlight_start":1,"highlight_end":37},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                // Same as e = |e - printed_so_far|.","highlight_start":1,"highlight_end":53},{"text":"                e = printed_so_far - e;","highlight_start":1,"highlight_end":40},{"text":"                exponent_positive = true;","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            curr -= 1;","highlight_start":1,"highlight_end":23},{"text":"            *buf_ptr.offset(curr) = b'.';","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            write_num(&mut n, &mut curr, buf_ptr, lut_ptr);","highlight_start":1,"highlight_end":60},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Write out the number with a fraction","highlight_start":1,"highlight_end":48},{"text":"        wr.write_all(","highlight_start":1,"highlight_end":22},{"text":"            slice::from_raw_parts(","highlight_start":1,"highlight_end":35},{"text":"                buf_ptr.offset(curr),","highlight_start":1,"highlight_end":38},{"text":"                BUF_LEN - curr as usize","highlight_start":1,"highlight_end":40},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        )?;","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Omit the 'e' notation for e == 0","highlight_start":1,"highlight_end":44},{"text":"        if e == 0 {","highlight_start":1,"highlight_end":20},{"text":"            return Ok(());","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        // Write the remaining `e` notation, with proper sign","highlight_start":1,"highlight_end":62},{"text":"        if exponent_positive {","highlight_start":1,"highlight_end":31},{"text":"            wr.write_all(b\"e+\")?;","highlight_start":1,"highlight_end":34},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            wr.write_all(b\"e-\")?;","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        return write(wr, true, e as u64, 0);","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::comparison_chain)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider rewriting the `if` chain to use `cmp` and `match`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `if` chain can be rewritten with `match`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/util/print_dec.rs:68:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if exponent == 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        write_num(&mut n, &mut curr, buf_ptr, lut_ptr);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return wr.write_all(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::comparison_chain)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider rewriting the `if` chain to use `cmp` and `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\u001b[0m\n\n"}
{"message":"unsafe function's docs miss `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/short.rs","byte_start":825,"byte_end":1095,"line_start":24,"line_end":33,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub unsafe fn from_slice(slice: &str) -> Self {","highlight_start":5,"highlight_end":52},{"text":"        let mut short = Short {","highlight_start":1,"highlight_end":32},{"text":"            value: [0; MAX_LEN],","highlight_start":1,"highlight_end":33},{"text":"            len: slice.len() as u8,","highlight_start":1,"highlight_end":36},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        ptr::copy_nonoverlapping(slice.as_ptr(), short.value.as_mut_ptr(), slice.len());","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        short","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::missing_safety_doc)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unsafe function's docs miss `# Safety` section\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/short.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn from_slice(slice: &str) -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut short = Short {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            value: [0; MAX_LEN],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            len: slice.len() as u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        short\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::missing_safety_doc)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\u001b[0m\n\n"}
{"message":"you should consider adding a `Default` implementation for `Object`","code":{"code":"clippy::new_without_default","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":7014,"byte_end":7099,"line_start":236,"line_end":240,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":27},{"text":"        Object {","highlight_start":1,"highlight_end":17},{"text":"            store: Vec::new()","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":6843,"byte_end":6843,"line_start":232,"line_end":232,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"impl Object {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"impl Default for Object {\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you should consider adding a `Default` implementation for `Object`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:236:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Object {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            store: Vec::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try adding this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ impl Default for Object {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     fn default() -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         Self::new()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"use of `offset` with a `usize` casted to an `isize`","code":{"code":"clippy::ptr_offset_with_cast","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":7450,"byte_end":7496,"line_start":253,"line_end":253,"column_start":18,"column_end":64,"is_primary":true,"text":[{"text":"        unsafe { self.store.as_mut_ptr().offset(index as isize) }","highlight_start":18,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":7450,"byte_end":7496,"line_start":253,"line_end":253,"column_start":18,"column_end":64,"is_primary":true,"text":[{"text":"        unsafe { self.store.as_mut_ptr().offset(index as isize) }","highlight_start":18,"highlight_end":64}],"label":null,"suggested_replacement":"self.store.as_mut_ptr().add(index)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `offset` with a `usize` casted to an `isize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:253:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        unsafe { self.store.as_mut_ptr().offset(index as isize) }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `self.store.as_mut_ptr().add(index)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\u001b[0m\n\n"}
{"message":"use of `offset` with a `usize` casted to an `isize`","code":{"code":"clippy::ptr_offset_with_cast","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":8322,"byte_end":8368,"line_start":273,"line_end":273,"column_start":21,"column_end":67,"is_primary":true,"text":[{"text":"                    self.store.as_mut_ptr().offset(index as isize),","highlight_start":21,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":8322,"byte_end":8368,"line_start":273,"line_end":273,"column_start":21,"column_end":67,"is_primary":true,"text":[{"text":"                    self.store.as_mut_ptr().offset(index as isize),","highlight_start":21,"highlight_end":67}],"label":null,"suggested_replacement":"self.store.as_mut_ptr().add(index)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `offset` with a `usize` casted to an `isize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:273:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.store.as_mut_ptr().offset(index as isize),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `self.store.as_mut_ptr().add(index)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\u001b[0m\n\n"}
{"message":"length comparison to zero","code":{"code":"clippy::len_zero","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":9652,"byte_end":9673,"line_start":311,"line_end":311,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::len_zero)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"using `is_empty` is clearer and more explicit","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":9652,"byte_end":9673,"line_start":311,"line_end":311,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":"self.store.is_empty()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: length comparison to zero\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:311:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if self.store.len() == 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: using `is_empty` is clearer and more explicit: `self.store.is_empty()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::len_zero)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\u001b[0m\n\n"}
{"message":"length comparison to zero","code":{"code":"clippy::len_zero","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":11303,"byte_end":11324,"line_start":362,"line_end":362,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"using `is_empty` is clearer and more explicit","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":11303,"byte_end":11324,"line_start":362,"line_end":362,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":"self.store.is_empty()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: length comparison to zero\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:362:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if self.store.len() == 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: using `is_empty` is clearer and more explicit: `self.store.is_empty()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\u001b[0m\n\n"}
{"message":"length comparison to zero","code":{"code":"clippy::len_zero","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":12117,"byte_end":12138,"line_start":389,"line_end":389,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"using `is_empty` is clearer and more explicit","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":12117,"byte_end":12138,"line_start":389,"line_end":389,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":"self.store.is_empty()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: length comparison to zero\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:389:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if self.store.len() == 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: using `is_empty` is clearer and more explicit: `self.store.is_empty()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\u001b[0m\n\n"}
{"message":"length comparison to zero","code":{"code":"clippy::len_zero","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":13321,"byte_end":13342,"line_start":427,"line_end":427,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"using `is_empty` is clearer and more explicit","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":13321,"byte_end":13342,"line_start":427,"line_end":427,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"        if self.store.len() == 0 {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":"self.store.is_empty()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: length comparison to zero\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:427:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m427\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if self.store.len() == 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: using `is_empty` is clearer and more explicit: `self.store.is_empty()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\u001b[0m\n\n"}
{"message":"this pattern creates a reference to a reference","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/object.rs","byte_start":17401,"byte_end":17414,"line_start":567,"line_end":567,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"                Some(ref other_val) => if *other_val != value { return false; },","highlight_start":22,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_borrow)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"json-rust/src/object.rs","byte_start":17401,"byte_end":17414,"line_start":567,"line_end":567,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"                Some(ref other_val) => if *other_val != value { return false; },","highlight_start":22,"highlight_end":35}],"label":null,"suggested_replacement":"other_val","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"json-rust/src/object.rs","byte_start":17422,"byte_end":17432,"line_start":567,"line_end":567,"column_start":43,"column_end":53,"is_primary":true,"text":[{"text":"                Some(ref other_val) => if *other_val != value { return false; },","highlight_start":43,"highlight_end":53}],"label":null,"suggested_replacement":"other_val","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this pattern creates a reference to a reference\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/object.rs:567:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Some(ref other_val) => if *other_val != value { return false; },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_borrow)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Some(\u001b[0m\u001b[0m\u001b[38;5;10mother_val\u001b[0m\u001b[0m) => if \u001b[0m\u001b[0m\u001b[38;5;10mother_val\u001b[0m\u001b[0m != value { return false; },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~\u001b[0m\n\n"}
{"message":"unsafe function's docs miss `# Safety` section","code":{"code":"clippy::missing_safety_doc","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":2029,"byte_end":2254,"line_start":63,"line_end":69,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub unsafe fn from_parts_unchecked(positive: bool, mantissa: u64, exponent: i16) -> Self {","highlight_start":5,"highlight_end":95},{"text":"        Number {","highlight_start":1,"highlight_end":17},{"text":"            category: positive as u8,","highlight_start":1,"highlight_end":38},{"text":"            exponent: exponent,","highlight_start":1,"highlight_end":32},{"text":"            mantissa: mantissa,","highlight_start":1,"highlight_end":32},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unsafe function's docs miss `# Safety` section\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:63:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe fn from_parts_unchecked(positive: bool, mantissa: u64, exponent: i16) -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Number {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            category: positive as u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            exponent: exponent,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            mantissa: mantissa,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\u001b[0m\n\n"}
{"message":"`if` chain can be rewritten with `match`","code":{"code":"clippy::comparison_chain","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":4810,"byte_end":5049,"line_start":152,"line_end":158,"column_start":14,"column_end":10,"is_primary":true,"text":[{"text":"        Some(if e_diff == 0 {","highlight_start":14,"highlight_end":30},{"text":"            self.mantissa","highlight_start":1,"highlight_end":26},{"text":"        } else if e_diff < 0 {","highlight_start":1,"highlight_end":31},{"text":"            self.mantissa.wrapping_div(decimal_power(-e_diff as u16))","highlight_start":1,"highlight_end":70},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            self.mantissa.wrapping_mul(decimal_power(e_diff as u16))","highlight_start":1,"highlight_end":69},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider rewriting the `if` chain to use `cmp` and `match`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `if` chain can be rewritten with `match`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:152:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        Some(if e_diff == 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.mantissa\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else if e_diff < 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.mantissa.wrapping_div(decimal_power(-e_diff as u16))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.mantissa.wrapping_mul(decimal_power(e_diff as u16))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider rewriting the `if` chain to use `cmp` and `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\u001b[0m\n\n"}
{"message":"`if` chain can be rewritten with `match`","code":{"code":"clippy::comparison_chain","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":5807,"byte_end":6030,"line_start":185,"line_end":191,"column_start":14,"column_end":10,"is_primary":true,"text":[{"text":"        Some(if e_diff == 0 {","highlight_start":14,"highlight_end":30},{"text":"            num","highlight_start":1,"highlight_end":16},{"text":"        } else if e_diff < 0 {","highlight_start":1,"highlight_end":31},{"text":"            num.wrapping_div(decimal_power(-e_diff as u16) as i64)","highlight_start":1,"highlight_end":67},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            num.wrapping_mul(decimal_power(e_diff as u16) as i64)","highlight_start":1,"highlight_end":66},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider rewriting the `if` chain to use `cmp` and `match`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `if` chain can be rewritten with `match`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:185:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        Some(if e_diff == 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            num\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else if e_diff < 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            num.wrapping_div(decimal_power(-e_diff as u16) as i64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            num.wrapping_mul(decimal_power(e_diff as u16) as i64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider rewriting the `if` chain to use `cmp` and `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\u001b[0m\n\n"}
{"message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":6426,"byte_end":6465,"line_start":210,"line_end":210,"column_start":13,"column_end":52,"is_primary":true,"text":[{"text":"            return self.mantissa == other.mantissa;","highlight_start":13,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_return)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"json-rust/src/number.rs","byte_start":6426,"byte_end":6465,"line_start":210,"line_end":210,"column_start":13,"column_end":52,"is_primary":true,"text":[{"text":"            return self.mantissa == other.mantissa;","highlight_start":13,"highlight_end":52}],"label":null,"suggested_replacement":"self.mantissa == other.mantissa","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:210:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            return self.mantissa == other.mantissa;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove `return`: `self.mantissa == other.mantissa`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_return)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\n"}
{"message":"`if` chain can be rewritten with `match`","code":{"code":"clippy::comparison_chain","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":6397,"byte_end":6762,"line_start":209,"line_end":219,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if e_diff == 0 {","highlight_start":9,"highlight_end":25},{"text":"            return self.mantissa == other.mantissa;","highlight_start":1,"highlight_end":52},{"text":"        } else if e_diff > 0 {","highlight_start":1,"highlight_end":31},{"text":"            let power = decimal_power(e_diff as u16);","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            self.mantissa.wrapping_mul(power) == other.mantissa","highlight_start":1,"highlight_end":64},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let power = decimal_power(-e_diff as u16);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            self.mantissa == other.mantissa.wrapping_mul(power)","highlight_start":1,"highlight_end":64},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider rewriting the `if` chain to use `cmp` and `match`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `if` chain can be rewritten with `match`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:209:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if e_diff == 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return self.mantissa == other.mantissa;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else if e_diff > 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let power = decimal_power(e_diff as u16);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.mantissa == other.mantissa.wrapping_mul(power)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider rewriting the `if` chain to use `cmp` and `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":10420,"byte_end":10446,"line_start":365,"line_end":365,"column_start":9,"column_end":35,"is_primary":true,"text":[{"text":"        f64::from(*self) == *other","highlight_start":9,"highlight_end":35}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::cmp_owned)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:365:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m365\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        f64::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::cmp_owned)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":10537,"byte_end":10563,"line_start":371,"line_end":371,"column_start":9,"column_end":35,"is_primary":true,"text":[{"text":"        f32::from(*self) == *other","highlight_start":9,"highlight_end":35}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:371:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        f32::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":10657,"byte_end":10683,"line_start":377,"line_end":377,"column_start":9,"column_end":35,"is_primary":true,"text":[{"text":"        f64::from(*other) == *self","highlight_start":9,"highlight_end":35}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:377:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m377\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        f64::from(*other) == *self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":10777,"byte_end":10803,"line_start":383,"line_end":383,"column_start":9,"column_end":35,"is_primary":true,"text":[{"text":"        f32::from(*other) == *self","highlight_start":9,"highlight_end":35}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:383:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m383\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        f32::from(*other) == *self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13200,"byte_end":13218,"line_start":475,"line_end":475,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13603,"byte_end":13642,"line_start":495,"line_end":495,"column_start":1,"column_end":40,"is_primary":false,"text":[{"text":"impl_signed!(isize, i8, i16, i32, i64);","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_signed!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":12031,"byte_end":13228,"line_start":435,"line_end":477,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_signed {","highlight_start":1,"highlight_end":27},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                if num < 0 {","highlight_start":1,"highlight_end":29},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: NEGATIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: -num as u64,","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Number {","highlight_start":1,"highlight_end":29},{"text":"                        category: POSITIVE,","highlight_start":1,"highlight_end":44},{"text":"                        exponent: 0,","highlight_start":1,"highlight_end":37},{"text":"                        mantissa: num as u64,","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if exponent != 0 {","highlight_start":1,"highlight_end":35},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mantissa = if positive {","highlight_start":1,"highlight_end":45},{"text":"                    mantissa as i64","highlight_start":1,"highlight_end":36},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    -(mantissa as i64)","highlight_start":1,"highlight_end":39},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_signed!(isize, i8, i16, i32, i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13378,"byte_end":13407,"line_start":483,"line_end":483,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                *self == Number::from(*other)","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:483:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                *self == Number::from(*other)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this creates an owned instance just for comparison","code":{"code":"clippy::cmp_owned","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/src/number.rs","byte_start":13540,"byte_end":13569,"line_start":489,"line_end":489,"column_start":17,"column_end":46,"is_primary":true,"text":[{"text":"                Number::from(*self) == *other","highlight_start":17,"highlight_end":46}],"label":"try implementing the comparison without allocating","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":12001,"byte_end":12019,"line_start":431,"line_end":431,"column_start":9,"column_end":27,"is_primary":false,"text":[{"text":"        impl_integer!($t);","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/src/number.rs","byte_start":13643,"byte_end":13684,"line_start":496,"line_end":496,"column_start":1,"column_end":42,"is_primary":false,"text":[{"text":"impl_unsigned!(usize, u8, u16, u32, u64);","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_unsigned!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":11231,"byte_end":12029,"line_start":404,"line_end":433,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_unsigned {","highlight_start":1,"highlight_end":29},{"text":"    ($( $t:ty ),*) => ($(","highlight_start":1,"highlight_end":26},{"text":"        impl From<$t> for Number {","highlight_start":1,"highlight_end":35},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn from(num: $t) -> Number {","highlight_start":1,"highlight_end":41},{"text":"                Number {","highlight_start":1,"highlight_end":25},{"text":"                    category: POSITIVE,","highlight_start":1,"highlight_end":40},{"text":"                    exponent: 0,","highlight_start":1,"highlight_end":33},{"text":"                    mantissa: num as u64,","highlight_start":1,"highlight_end":42},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl TryFrom<Number> for $t {","highlight_start":1,"highlight_end":38},{"text":"            type Error = NumberOutOfScope;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn try_from(num: Number) -> Result<Self, Self::Error> {","highlight_start":1,"highlight_end":68},{"text":"                let (positive, mantissa, exponent) = num.as_parts();","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if !positive || exponent != 0 {","highlight_start":1,"highlight_end":48},{"text":"                    return Err(NumberOutOfScope);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                TryFrom::try_from(mantissa).map_err(Into::into)","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_integer!($t);","highlight_start":1,"highlight_end":27},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"impl_integer!","def_site_span":{"file_name":"json-rust/src/number.rs","byte_start":13230,"byte_end":13601,"line_start":479,"line_end":493,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_integer {","highlight_start":1,"highlight_end":28},{"text":"    ($t:ty) => {","highlight_start":1,"highlight_end":17},{"text":"        impl PartialEq<$t> for Number {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &$t) -> bool {","highlight_start":1,"highlight_end":47},{"text":"                *self == Number::from(*other)","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl PartialEq<Number> for $t {","highlight_start":1,"highlight_end":40},{"text":"            fn eq(&self, other: &Number) -> bool {","highlight_start":1,"highlight_end":51},{"text":"                Number::from(*self) == *other","highlight_start":1,"highlight_end":46},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this creates an owned instance just for comparison\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/src/number.rs:489:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Number::from(*self) == *other\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mtry implementing the comparison without allocating\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl_unsigned!(usize, u8, u16, u32, u64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `impl_integer` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"70 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 70 warnings emitted\u001b[0m\n\n"}
