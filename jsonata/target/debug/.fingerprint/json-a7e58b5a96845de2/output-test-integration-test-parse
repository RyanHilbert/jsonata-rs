{"message":"used `assert_eq!` with a literal bool","code":{"code":"clippy::bool_assert_comparison","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":128,"byte_end":169,"line_start":9,"line_end":9,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"    assert_eq!(parse(\"true\").unwrap(), true);","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::bool_assert_comparison)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":128,"byte_end":169,"line_start":9,"line_end":9,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"    assert_eq!(parse(\"true\").unwrap(), true);","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":"assert!(..)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `assert_eq!` with a literal bool\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"true\").unwrap(), true);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `assert!(..)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::bool_assert_comparison)]` on by default\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\u001b[0m\n\n"}
{"message":"used `assert_eq!` with a literal bool","code":{"code":"clippy::bool_assert_comparison","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":204,"byte_end":247,"line_start":14,"line_end":14,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    assert_eq!(parse(\"false\").unwrap(), false);","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":204,"byte_end":247,"line_start":14,"line_end":14,"column_start":5,"column_end":48,"is_primary":true,"text":[{"text":"    assert_eq!(parse(\"false\").unwrap(), false);","highlight_start":5,"highlight_end":48}],"label":null,"suggested_replacement":"assert!(..)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `assert_eq!` with a literal bool\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"false\").unwrap(), false);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `assert!(..)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\u001b[0m\n\n"}
{"message":"used `assert_eq!` with a literal bool","code":{"code":"clippy::bool_assert_comparison","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":4751,"byte_end":4778,"line_start":258,"line_end":258,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    assert_eq!(data[2], false);","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":4751,"byte_end":4778,"line_start":258,"line_end":258,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"    assert_eq!(data[2], false);","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":"assert!(..)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `assert_eq!` with a literal bool\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:258:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(data[2], false);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `assert!(..)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\u001b[0m\n\n"}
{"message":"approximate value of `f{32, 64}::consts::PI` found. Consider using it directly","code":{"code":"clippy::approx_constant","explanation":null},"level":"error","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":407,"byte_end":424,"line_start":24,"line_end":24,"column_start":53,"column_end":70,"is_primary":true,"text":[{"text":"    assert_eq!(parse(\"3.141592653589793\").unwrap(), 3.141592653589793);","highlight_start":53,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[deny(clippy::approx_constant)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:24:53\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"3.141592653589793\").unwrap(), 3.141592653589793);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[deny(clippy::approx_constant)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\u001b[0m\n\n"}
{"message":"strict comparison of `f32` or `f64`","code":{"code":"clippy::float_cmp","explanation":null},"level":"error","spans":[{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":1159,"byte_end":1184,"line_start":39,"line_end":39,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":359,"byte_end":426,"line_start":24,"line_end":24,"column_start":5,"column_end":72,"is_primary":false,"text":[{"text":"    assert_eq!(parse(\"3.141592653589793\").unwrap(), 3.141592653589793);","highlight_start":5,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[deny(clippy::float_cmp)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: strict comparison of `f32` or `f64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"3.141592653589793\").unwrap(), 3.141592653589793);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[deny(clippy::float_cmp)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"strict comparison of `f32` or `f64`","code":{"code":"clippy::float_cmp","explanation":null},"level":"error","spans":[{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":1159,"byte_end":1184,"line_start":39,"line_end":39,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":635,"byte_end":676,"line_start":39,"line_end":39,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    assert_eq!(parse(\"0.05\").unwrap(), 0.05);","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: strict comparison of `f32` or `f64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"0.05\").unwrap(), 0.05);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"strict comparison of `f32` or `f64`","code":{"code":"clippy::float_cmp","explanation":null},"level":"error","spans":[{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":1159,"byte_end":1184,"line_start":39,"line_end":39,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":855,"byte_end":916,"line_start":47,"line_end":47,"column_start":5,"column_end":66,"is_primary":false,"text":[{"text":"    assert_eq!(parsed.as_f64().unwrap(), 2.225073858507201e-308);","highlight_start":5,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: strict comparison of `f32` or `f64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:47:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parsed.as_f64().unwrap(), 2.225073858507201e-308);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"strict comparison of `f32` or `f64`","code":{"code":"clippy::float_cmp","explanation":null},"level":"error","spans":[{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":1159,"byte_end":1184,"line_start":39,"line_end":39,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":2011,"byte_end":2052,"line_start":99,"line_end":99,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    assert_eq!(parse(\"5e-2\").unwrap(), 0.05);","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: strict comparison of `f32` or `f64`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:99:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"5e-2\").unwrap(), 0.05);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"strict comparison of `f32` or `f64`","code":{"code":"clippy::float_cmp","explanation":null},"level":"error","spans":[{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":1159,"byte_end":1184,"line_start":39,"line_end":39,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":2057,"byte_end":2098,"line_start":100,"line_end":100,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    assert_eq!(parse(\"5E-2\").unwrap(), 0.05);","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: strict comparison of `f32` or `f64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:100:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"5E-2\").unwrap(), 0.05);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"strict comparison of `f32` or `f64`","code":{"code":"clippy::float_cmp","explanation":null},"level":"error","spans":[{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":1159,"byte_end":1184,"line_start":39,"line_end":39,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":2221,"byte_end":2297,"line_start":110,"line_end":110,"column_start":5,"column_end":81,"is_primary":false,"text":[{"text":"    assert_eq!(parse(\"18446744073709551616\").unwrap(), 18446744073709552000f64);","highlight_start":5,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: strict comparison of `f32` or `f64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:110:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(parse(\"18446744073709551616\").unwrap(), 18446744073709552000f64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead","code":{"code":"clippy::toplevel_ref_arg","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":3901,"byte_end":3907,"line_start":213,"line_end":213,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let ref pi = data[\"pi\"];","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::toplevel_ref_arg)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":3897,"byte_end":3921,"line_start":213,"line_end":213,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"    let ref pi = data[\"pi\"];","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":"let pi = &data[\"pi\"];","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:213:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let ref pi = data[\"pi\"];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: try: `let pi = &data[\"pi\"];`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::toplevel_ref_arg)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\u001b[0m\n\n"}
{"message":"approximate value of `f{32, 64}::consts::PI` found. Consider using it directly","code":{"code":"clippy::approx_constant","explanation":null},"level":"error","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":3942,"byte_end":3946,"line_start":215,"line_end":215,"column_start":20,"column_end":24,"is_primary":true,"text":[{"text":"    assert_eq!(pi, 3.14);","highlight_start":20,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:215:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(pi, 3.14);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\u001b[0m\n\n"}
{"message":"strict comparison of `f32` or `f64`","code":{"code":"clippy::float_cmp","explanation":null},"level":"error","spans":[{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":1159,"byte_end":1184,"line_start":39,"line_end":39,"column_start":21,"column_end":46,"is_primary":true,"text":[{"text":"                if !(*left_val == *right_val) {","highlight_start":21,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":3927,"byte_end":3948,"line_start":215,"line_end":215,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    assert_eq!(pi, 3.14);","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":999,"byte_end":2326,"line_start":35,"line_end":62,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr $(,)?) => ({","highlight_start":1,"highlight_end":42},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::None);","highlight_start":1,"highlight_end":115},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    let kind = $crate::panicking::AssertKind::Eq;","highlight_start":1,"highlight_end":66},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    $crate::panicking::assert_failed(kind, &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":147},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: strict comparison of `f32` or `f64`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:215:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert_eq!(pi, 3.14);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`assert!(true)` will be optimized out by the compiler","code":{"code":"clippy::assertions_on_constants","explanation":null},"level":"warning","spans":[{"file_name":"json-rust/tests/parse.rs","byte_start":6117,"byte_end":6131,"line_start":337,"line_end":337,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    assert!(true);","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"json-rust/tests/parse.rs","byte_start":6117,"byte_end":6131,"line_start":337,"line_end":337,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    assert!(true);","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert!","def_site_span":{"file_name":"/home/johan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":46108,"byte_end":46264,"line_start":1337,"line_end":1340,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! assert {","highlight_start":5,"highlight_end":26},{"text":"        ($cond:expr $(,)?) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":61},{"text":"        ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(clippy::assertions_on_constants)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `assert!(true)` will be optimized out by the compiler\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mjson-rust/tests/parse.rs:337:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    assert!(true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::assertions_on_constants)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove it\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 9 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 9 previous errors; 5 warnings emitted\u001b[0m\n\n"}
